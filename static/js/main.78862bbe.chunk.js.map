{"version":3,"sources":["components/Li.jsx","components/InputArea.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["Li","props","useState","isDone","SetIsDone","onClick","prevValue","onDoubleClick","onCheked","id","style","textDecoration","item","InputArea","inputTextItem","setInputTextItem","className","onChange","event","value","target","name","type","onAdd","App","items","setItems","deleteItem","prevItems","window","confirm","filter","index","fontSize","map","todoItem","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mMA2BeA,MAzBf,SAAYC,GAAQ,IAAD,EACWC,oBAAS,GADpB,mBACVC,EADU,KACFC,EADE,KAWjB,OACE,yBACEC,QAVJ,WACED,GAAU,SAAAE,GAGR,OAAQA,MAORC,cAAe,WACbN,EAAMO,SAASP,EAAMQ,MAGvB,wBAAIC,MAAO,CAAEC,eAAgBR,EAAS,eAAiB,SACpDF,EAAMW,QCeAC,MAlCf,SAAmBZ,GAAQ,IAAD,EACkBC,mBAAS,IAD3B,mBACjBY,EADiB,KACFC,EADE,KASxB,OACE,yBAAKC,UAAU,QACb,2BACEC,SATN,SAAsBC,GAAQ,IACpBC,EAAUD,EAAME,OAAhBD,MAERJ,EAAiBI,IAObA,MAAOL,EACPO,KAAK,YACLC,KAAK,OACLR,cAAeA,IAEjB,gCACE,0BACEO,KAAMP,EAAcO,KACpBF,MAAOL,EAAcK,MACrBd,QAAS,WACPJ,EAAMsB,MAAMT,GACZC,EAAiB,MALrB,U,gBCgDOS,MAhEf,SAAavB,GAAO,MAqBQC,mBAAS,IArBjB,mBAqBXuB,EArBW,KAqBJC,EArBI,KA4BlB,SAASC,EAAWlB,GAClBiB,GAAS,SAAAE,GACP,OAAIC,OAAOC,QAAQ,uCACVF,EAAUG,QAAO,SAACnB,EAAMoB,GAE7B,OAAOA,IAAUvB,KAGZmB,KAOb,OACE,yBAAKZ,UAAU,aACb,yBAAKA,UAAU,WACb,2CAEF,6BACE,uBAAGN,MARG,CAAEuB,SAAU,SAShB,kBAAC,IAAD,MADF,IAC6B,6BAD7B,kCACkE,6BADlE,8BAE8B,KAE9B,kBAAC,EAAD,CAAWV,MA9BjB,SAAiBT,GACfY,GAAS,SAAAE,GACP,MAAM,GAAN,mBAAWA,GAAX,CAAsBd,UA6BpB,4BACGW,EAAMS,KAAI,SAACC,EAAUH,GAAX,OACT,kBAAC,EAAD,CAAII,IAAKJ,EAAOvB,GAAIuB,EAAOxB,SAAUmB,EAAYf,KAAMuB,WCjD/CE,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.78862bbe.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Li(props) {\r\n  const [isDone, SetIsDone] = useState(false); //bollean state\r\n\r\n  function handleClick() {\r\n    SetIsDone(prevValue => {\r\n      //oposite of the previous value to avoid ifs conditions like\r\n      // if(prevValue === true) return false and else...\r\n      return !prevValue;\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div\r\n      onClick={handleClick}\r\n      onDoubleClick={() => {\r\n        props.onCheked(props.id); //execute on click\r\n      }}\r\n    >\r\n      <li style={{ textDecoration: isDone ? \"line-through\" : \"none\" }}>\r\n        {props.item}\r\n      </li>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Li;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction InputArea(props) {\r\n  const [inputTextItem, setInputTextItem] = useState(\"\"); // state initialized\r\n\r\n  function handleChange(event) {\r\n    const { value } = event.target;\r\n\r\n    setInputTextItem(value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"form\">\r\n      <input\r\n        onChange={handleChange}\r\n        value={inputTextItem}\r\n        name=\"inputItem\"\r\n        type=\"text\"\r\n        inputTextItem={inputTextItem}\r\n      />\r\n      <button>\r\n        <span\r\n          name={inputTextItem.name}\r\n          value={inputTextItem.value}\r\n          onClick={() => {\r\n            props.onAdd(inputTextItem);\r\n            setInputTextItem(\"\");\r\n          }}\r\n        >\r\n          Add\r\n        </span>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InputArea;\r\n","import React, { useState } from \"react\";\nimport Li from \"./Li\";\nimport InputArea from \"./InputArea\";\nimport FormatListBulletedIcon from \"@material-ui/icons/FormatListBulleted\";\n\nfunction App(props) {\n  //step 1 create a state to inputed text\n\n  //step 2 where to put this state? ...on input tag to do it we must add a value to it\n\n  //step 3 When we call the function that change the state ? when input got changed\n  //      create a function tha handle that event on input tag\n\n  // step 4: How to test if changing of state itÂ´s working?\n  //        go to React dev tools and watch the state when you tare typing the item\n\n  // step 5: create an state array to save all items\n\n  // step 6: add a map in ul tag to read each item in the items array and in the same time to add li tag to each item\n\n  //step 7: create an click event on the button tag to call the function addItem\n\n  //step 8: create the function addItem wich will call the setItem function to change the state\n  //         and return an array with the previous items\n\n  //step 9: clean the inputed text to easily writte a new one calling an empty setInputTextItem\n  const [items, setItems] = useState([]); //array initialized\n\n  function addItem(inputTextItem) {\n    setItems(prevItems => {\n      return [...prevItems, inputTextItem];\n    });\n  }\n  function deleteItem(id) {\n    setItems(prevItems => {\n      if (window.confirm(\"Are you sure to delete this record?\")) {\n        return prevItems.filter((item, index) => {\n          //we got each item and each index of the prevItems array\n          return index !== id; //condition of the filter\n        });\n      } else {\n        return prevItems;\n      }\n    });\n  }\n\n  var style = { fontSize: \"10px\" };\n\n  return (\n    <div className=\"container\">\n      <div className=\"heading\">\n        <h1>To-Do List</h1>\n      </div>\n      <div>\n        <p style={style}>\n          <FormatListBulletedIcon /> <br /> 1 click to cross out the item <br />\n          2 clicks to delete the item{\" \"}\n        </p>\n        <InputArea onAdd={addItem} />\n        <ul>\n          {items.map((todoItem, index) => (\n            <Li key={index} id={index} onCheked={deleteItem} item={todoItem} />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n/* import './index.css'; */\nimport App from './components/App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}